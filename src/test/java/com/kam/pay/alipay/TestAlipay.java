package com.kam.pay.alipay;import com.alibaba.fastjson.JSON;import com.alipay.easysdk.factory.Factory;import com.alipay.easysdk.kernel.Config;import com.alipay.easysdk.payment.common.models.AlipayDataDataserviceBillDownloadurlQueryResponse;import com.alipay.easysdk.payment.common.models.AlipayTradeCreateResponse;import com.alipay.easysdk.payment.wap.models.AlipayTradeWapPayResponse;import com.kam.pay.alipay.config.AlipayConfig;import com.kam.pay.alipay.consts.AliPayConsts;import com.kam.pay.alipay.open.PayApi;import org.junit.Before;import org.junit.Test;import java.net.URLDecoder;import java.util.UUID;/** * @author <a href="mailto:xinput.xx@gmail.com">xinput</a> * @date 2020-10-15 11:54 */public class TestAlipay {    @Before    public void setUp() {        Factory.setOptions(getOptions());    }    private static Config getOptions() {        Config config = new Config();        config.protocol = AlipayConfig.getProtocol();        config.gatewayHost = AlipayConfig.getGatewayHost();        config.signType = AlipayConfig.getSignType();        config.appId = AlipayConfig.getAppId();        // 应用私钥        config.merchantPrivateKey = AlipayConfig.getMerchantPrivateKey();        //注：证书文件路径支持设置为文件系统中的路径或CLASS_PATH中的路径，优先从文件系统中加载，加载失败后会继续尝试从CLASS_PATH中加载        // 应用公钥证书文件路径        config.merchantCertPath = AlipayConfig.getMerchantCertPath();        // 支付宝公钥证书文件路径        config.alipayCertPath = AlipayConfig.getAlipayCertPath();        // 支付宝根证书文件路径        config.alipayRootCertPath = AlipayConfig.getAlipayRootCertPath();        //可设置异步通知接收服务地址（可选）        config.notifyUrl = AlipayConfig.getNotifyUrl();        return config;    }    @Test    public void testCreate() throws Exception {        String outTradeNo = UUID.randomUUID().toString();        AlipayTradeCreateResponse response = Factory.Payment.Common().create(                "iPhone6 16G", outTradeNo, "0.01", "2088002656718920");        System.out.println(JSON.toJSONString(response, true));        System.out.println("\n\n\n");        System.out.println(response.httpBody);//        assertThat(ResponseChecker.success(response), is(true));//        assertThat(response.code, is("10000"));//        assertThat(response.msg, is("Success"));//        assertThat(response.subCode, is(nullValue()));//        assertThat(response.subMsg, is(nullValue()));//        assertThat(response.httpBody, not(nullValue()));//        assertThat(response.outTradeNo, is(outTradeNo));//        assertThat(response.tradeNo, startsWith("202"));    }    @Test    public void wapPay() throws Exception {        String subject = "iPhone6 16G";        String outTradeNo = UUID.randomUUID().toString().replaceAll("-", "");        System.out.println(outTradeNo);        String totalAmount = "100.01";        String quitUrl = "";        String returnUrl = "";        AlipayTradeWapPayResponse payResponse =                PayApi.wapPay(subject, outTradeNo, totalAmount, quitUrl, returnUrl);        System.out.println(JSON.toJSONString(payResponse, true));    }    @Test    public void downloadBill() throws Exception {        AlipayDataDataserviceBillDownloadurlQueryResponse response =                PayApi.downloadBill(AliPayConsts.BillTypeEnum.TRADE, "2020-10-15");        System.out.println(JSON.toJSONString(response, true));        System.out.println("\n\n\n");        System.out.println("code: " + response.code);        System.out.println("msg: " + response.msg);        System.out.println("subCode: " + response.subCode);        System.out.println("subMsg: " + response.subMsg);        System.out.println("httpBody: " + response.httpBody);        System.out.println("billDownloadUrl: " + response.billDownloadUrl);        System.out.println("encodeUrl: " + URLDecoder.decode(response.billDownloadUrl));    }}